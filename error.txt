# Remove 'https://' if present
$env:eks_domain = $env:eks_domain -replace '^https://', ''
Write-Host "Connecting to EKS domain: $env:eks_domain"

try {
    # Create a TCP client to connect to the EKS API endpoint on port 443
    Write-Host "Creating TCP client to $env:eks_domain on port 443"
    $tcpClient = New-Object System.Net.Sockets.TcpClient($env:eks_domain, 443)
    Write-Host "TCP client created successfully"
} catch {
    Write-Error "Failed to connect to $env:eks_domain on port 443: $_"
    exit 1
}

# Create an SSL stream for the TCP connection
try {
    $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream(), $false, { $true })
    Write-Host "SSL stream created successfully"
} catch {
    Write-Error "Failed to create SSL stream: $_"
    $tcpClient.Close()
    exit 1
}

try {
    # Authenticate as a client without using any client certificates
    $sslProtocols = [System.Security.Authentication.SslProtocols]::Tls12
    Write-Host "Using SSL/TLS Protocols: $sslProtocols"
    $sslStream.AuthenticateAsClient($env:eks_domain, $null, $sslProtocols, $false)
    Write-Host "SSL authentication succeeded"

    # Get the remote certificate presented by the server
    $cert = $sslStream.RemoteCertificate
    $cert2 = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $cert

    # Display certificate information
    Write-Host "Certificate Subject: $($cert2.Subject)"
    Write-Host "Certificate Issuer: $($cert2.Issuer)"
    Write-Host "Certificate Valid From: $($cert2.NotBefore)"
    Write-Host "Certificate Valid To: $($cert2.NotAfter)"
    Write-Host "Thumbprint: $($cert2.Thumbprint)"

    # Optionally, export the certificate to a file for further inspection
    $certPath = "$env:TEMP\eks_server_cert.cer"
    [System.IO.File]::WriteAllBytes($certPath, $cert2.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))
    Write-Host "Certificate saved to: $certPath"
} catch {
    Write-Error "SSL/TLS handshake failed: $($_.Exception.Message)"
    if ($_.Exception.InnerException) {
        Write-Error "Inner Exception: $($_.Exception.InnerException.Message)"
    }
} finally {
    # Close the SSL stream and TCP client
    $sslStream.Close()
    $tcpClient.Close()
}
