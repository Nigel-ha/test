- job: cloud
  displayName: Generate kubeconfig with token
  pool:
    name: prod-cloudpool-nix
  steps:
    - checkout: self
    - checkout: commonScripts
    - task: Bash@3
      displayName: "Install"
      inputs:
        targetType: "inline"
        script: |
          mv SCE-EKS/* .
          rm -rf SCE-EKS

          uname -a
          whoami

          mkdir -p keys
          mkdir -p scripts
          mkdir -p CF
          mv SCE-Common/keys/* keys/
          mv SCE-Common/scripts/*.* scripts/
          rm -rf SCE-Common

          chmod u+x scripts/*.sh
          scripts/aws-cli.sh

    - task: AzureKeyVault@2
      displayName: 'Get ExternalID from KeyVault'
      inputs:
        azureSubscription: 'AKV Cloud Engineering Secret Reader'
        KeyVaultName: 'kv-bcz-cet'
        SecretsFilter: 'externalid'
        RunAsPreJob: false

    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      displayName: 'Generate kubeconfig with embedded token and Publish Artifact'
      env:
        externalID: $(externalid)
      inputs:
        awsCredentials: ${{ parameters.serviceConnection }}
        regionName: ap-southeast-2
        scriptType: inline
        inlineScript: |
          #!/bin/bash
          set -e
          . scripts/setup.sh "${{parameters.clusterName}}"

          # Fetch cluster details
          cluster_endpoint=$(aws eks describe-cluster --name "${clusterName}" --query 'cluster.endpoint' --output text)
          cluster_ca=$(aws eks describe-cluster --name "${clusterName}" --query 'cluster.certificateAuthority.data' --output text)

          # Generate token with default expiration (15 minutes)
          token=$(aws eks get-token --cluster-name "${clusterName}" --query 'status.token' --output text)

          # Create kubeconfig with embedded token
          cat <<EOF > kubeconfig
apiVersion: v1
clusters:
- cluster:
    server: ${cluster_endpoint}
    certificate-authority-data: ${cluster_ca}
  name: eks-cluster
contexts:
- context:
    cluster: eks-cluster
    user: eks-user
  name: eks-context
current-context: eks-context
kind: Config
preferences: {}
users:
- name: eks-user
  user:
    token: ${token}
EOF

          # Avoid logging the kubeconfig content to prevent leaking the token
          # Verify kubeconfig without displaying sensitive data
          kubectl config view --flatten --minify

          # Copy kubeconfig to artifact staging directory
          mkdir -p $(Build.ArtifactStagingDirectory)
          cp kubeconfig $(Build.ArtifactStagingDirectory)/kubeconfig

    - task: PublishPipelineArtifact@1
      displayName: 'Publish kubeconfig Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'kubeconfig-artifact'
