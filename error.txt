#!/bin/bash

# Function to install yq based on the OS
install_yq() {
  # Check if the system is using apt (Debian/Ubuntu)
  if command -v apt-get &> /dev/null; then
    echo "Detected apt-based system. Installing yq via apt..."
    sudo apt-get update -y
    sudo apt-get install -y yq

  # Check if the system is using yum (RedHat/CentOS/Fedora)
  elif command -v yum &> /dev/null; then
    echo "Detected yum-based system. Installing yq via yum..."
    sudo yum install -y epel-release
    sudo yum install -y yq

  # Fallback to installing yq via binary download for other systems
  else
    echo "No package manager detected. Installing yq via direct download..."
    YQ_BINARY="yq_linux_amd64"
    wget "https://github.com/mikefarah/yq/releases/latest/download/$YQ_BINARY" -O /usr/local/bin/yq
    chmod +x /usr/local/bin/yq
  fi
}

# Check if yq is installed
if ! command -v yq &> /dev/null; then
  echo "yq not found. Installing yq..."
  install_yq

  # Verify installation
  if command -v yq &> /dev/null; then
    echo "yq successfully installed."
  else
    echo "Failed to install yq."
    exit 1
  fi
else
  echo "yq is already installed."
fi

# Check yq version to ensure it's correctly installed
yq --version



#!/bin/bash

# Variables
CLUSTER_NAME=$1
AWS_REGION=${2:-ap-southeast-2}

# Generate the initial kubeconfig with aws eks update-kubeconfig
aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$AWS_REGION"

# Get the private endpoint for the EKS cluster
PRIVATE_ENDPOINT=$(aws eks describe-cluster \
  --name "$CLUSTER_NAME" \
  --region "$AWS_REGION" \
  --query "cluster.endpoint" \
  --output text | sed 's/eks.amazonaws.com/vpce.amazonaws.com/')

# Validate we have the private endpoint
if [ -z "$PRIVATE_ENDPOINT" ]; then
  echo "Error: Could not retrieve the private endpoint for the EKS cluster."
  exit 1
fi

# Edit kubeconfig to use the private endpoint and disable certificate verification
KUBECONFIG_PATH="$HOME/.kube/config"

# Modify the server URL to use the private endpoint
sed -i "s|server: https://.*eks.amazonaws.com|server: https://$PRIVATE_ENDPOINT|g" "$KUBECONFIG_PATH"

# Add 'insecure-skip-tls-verify: true' to the config
yq e '.clusters[].cluster."insecure-skip-tls-verify" = true' -i "$KUBECONFIG_PATH"

# Verify the config has been updated
cat "$KUBECONFIG_PATH"

# Store the kubeconfig as an artifact for use on the on-prem agent
cp "$KUBECONFIG_PATH" "$(Pipeline.Workspace)/kubeconfig"
