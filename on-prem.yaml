parameters:
  - name: clusterName
    displayName: Cluster Name
    type: string
  - name: serviceConnection
    displayName: Service connection to use
    type: string

jobs:
  - job: cloud
    displayName: Generate EKS access token
    pool:
      name: prod-cloudpool-nix
    steps:
      - checkout: self
      - checkout: commonScripts
      - task: Bash@3
        displayName: "Install"
        inputs:
          targetType: "inline"
          script: |
            mv SCE-EKS/* .
            rm -rf SCE-EKS
            uname -a
            whoami
            mkdir -p keys scripts CF
            mv SCE-Common/keys/* keys/
            mv SCE-Common/scripts/*.* scripts/
            rm -rf SCE-Common
            chmod u+x scripts/*.sh
            scripts/aws-cli.sh
            scripts/yqInstall.sh

      - task: AzureKeyVault@2
        displayName: 'Get ExternalID from KeyVault'
        inputs:
          azureSubscription: 'AKV Cloud Engineering Secret Reader'
          KeyVaultName: 'kv-bcz-cet'
          SecretsFilter: 'externalid'
          RunAsPreJob: false

      - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
        displayName: 'Generate kubeconfig'
        env:
          externalID: $(externalid)
        inputs:
          awsCredentials: ${{ parameters.serviceConnection }}
          regionName: ap-southeast-2
          scriptType: inline
          inlineScript: |
            #!/bin/bash
            set -e
            . scripts/setup.sh "${{parameters.clusterName}}"

            # Generate kubeconfig file
            aws eks update-kubeconfig --name "${clusterName}" --region ap-southeast-2 --kubeconfig kubeconfig
            
            # Using yq to set "insecure-skip-tls-verify" to true
            yq e '.clusters[].cluster."insecure-skip-tls-verify" = true' -i kubeconfig

            # Remove "certificate-authority-data" field using yq
            yq e 'del(.clusters[].cluster."certificate-authority-data")' -i kubeconfig
            
            # Fetch and embed the token using yq
            token=$(aws eks get-token --cluster-name "${clusterName}" --region ap-southeast-2 --query 'status.token' --output text)
            yq e '.users[0].user.token = "'"$token"'"' -i kubeconfig

            # Copy kubeconfig to artifact staging directory
            mkdir -p $(Build.ArtifactStagingDirectory)
            cp kubeconfig $(Build.ArtifactStagingDirectory)/kubeconfig

      - task: PublishPipelineArtifact@1
        displayName: 'Publish kubeconfig Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/kubeconfig'
          artifact: 'kubeconfig-artifact'
          allowUnsecure: true

      - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
        displayName: 'Generate EKS Token and Retrieve Cluster Info'
        name: generate
        env:
          externalID: $(externalid)
        inputs:
          awsCredentials: ${{ parameters.serviceConnection }}
          regionName: ap-southeast-2
          scriptType: inline
          inlineScript: |
            . scripts/setup.sh "${{parameters.clusterName}}"
            token=$(aws eks get-token --cluster-name "${clusterName}" --query 'status.token' --output text)
            nlb_alias=$(aws cloudformation describe-stacks --stack-name "${stackName}" --query 'Stacks[0].Outputs[?OutputKey==`NLBAlias`].OutputValue' --output text)
            eks_domain=$(aws eks describe-cluster --name "${clusterName}" --query 'cluster.endpoint' --output text | sed 's|https://||')
            echo "##vso[task.setvariable variable=nlb_alias;isOutput=true]$nlb_alias"
            echo "##vso[task.setvariable variable=eks_domain;isOutput=true]$eks_domain"
