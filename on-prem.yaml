parameters:
  - name: clusterName
    displayName: Cluster Name
    type: string
  - name: serviceConnection
    displayName: Service connection to use
    type: string

jobs:
  - job: cloud
    displayName: Generate EKS access token
    pool:
      name: prod-cloudpool-nix
    steps:
      - checkout: self
      - checkout: commonScripts
      - task: Bash@3
        displayName: "Install"
        inputs:
          targetType: "inline"
          script: |
            mv SCE-EKS/* .
            rm -rf SCE-EKS

            uname -a
            whoami
            # which kubectl

            mkdir -p keys
            mkdir -p scripts
            mkdir -p CF
            mv SCE-Common/keys/* keys/
            mv SCE-Common/scripts/*.* scripts/
            # mv SCE-Common/CF/product CF/
            rm -rf SCE-Common

            chmod u+x scripts/*.sh
            scripts/aws-cli.sh

      - task: AzureKeyVault@2
        displayName: 'Get ExternalID from KeyVault'
        inputs:
          azureSubscription: 'AKV Cloud Engineering Secret Reader'
          KeyVaultName: 'kv-bcz-cet'
          SecretsFilter: 'externalid'
          RunAsPreJob: false

    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      displayName: 'Generate EKS Token and Retrieve Cluster Info'
      name: generate
      env:
        externalID: $(externalid)
      inputs:
        awsCredentials: ${{ parameters.serviceConnection }}
        regionName: ap-southeast-2
        scriptType: inline
        inlineScript: |
          . scripts/setup.sh "${{parameters.clusterName}}"
          clusterName="${clusterName}"
          token=$(aws eks get-token --cluster-name "${clusterName}" --query 'status.token' --output text)
          cluster_ca=$(aws eks describe-cluster --name "${clusterName}" --query 'cluster.certificateAuthority.data' --output text)
          nlb_dns_name=$(aws cloudformation describe-stacks --stack-name "${clusterName}" --query 'Stacks[0].Outputs[?OutputKey==`NLBDNSName`].OutputValue' --output text)
          echo "##vso[task.setvariable variable=eks_token;isOutput=true]$token"
          echo "##vso[task.setvariable variable=cluster_ca;isOutput=true]$cluster_ca"
          echo "##vso[task.setvariable variable=nlb_dns_name;isOutput=true]$nlb_dns_name"


  - job: onPrem
    displayName: Deploy
    dependsOn: cloud
    variables:
      eks_token: $[ dependencies.cloud.outputs['generate.eks_token'] ]
      cluster_ca: $[ dependencies.cloud.outputs['generate.cluster_ca'] ]
      nlb_dns_name: $[ dependencies.cloud.outputs['generate.nlb_dns_name'] ]

    pool:
      name: Prod-ReleasePool-Lower
    steps:
    - task: PowerShell@2
      displayName: 'Install kubectl'
      inputs:
        targetType: 'inline'
        script: |
          # Variables
          $kubectlUrl = "https://nexus.bcz.gov.au/repository/raw-thirdparty/kubenetes/kubectl/v1.31.0/kubectl.exe"
          $destinationPath = "$(Build.ArtifactStagingDirectory)\kubectl.exe"  # Destination to save kubectl

          # Log the download information
          Write-Host "Downloading kubectl from Nexus: $kubectlUrl"
          
          # Download the file
          Invoke-WebRequest -Uri $kubectlUrl -OutFile $destinationPath

          # Check if the file exists
          if (Test-Path $destinationPath) {
            Write-Host "kubectl downloaded successfully to $destinationPath"
          } else {
            Write-Host "Failed to download kubectl."
            exit 1
          }

          # Add the directory to PATH
          $env:PATH += ";$(Build.ArtifactStagingDirectory)"

          # Verify kubectl version
          & kubectl.exe version --client
  - task: PowerShell@2
  displayName: 'Configure kubeconfig'
  inputs:
    targetType: 'inline'
    script: |
      # Set environment variables
      $env:eks_token = '$(eks_token)'
      $env:cluster_ca = '$(cluster_ca)'
      $env:nlb_dns_name = '$(nlb_dns_name)'

      # Define the kubeconfig path
      $kubeconfigPath = "$env:USERPROFILE\.kube\config"

      # Ensure the .kube directory exists
      New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.kube" | Out-Null

      # Create the kubeconfig content
      $kubeconfigContent = @"
apiVersion: v1
clusters:
- cluster:
    server: https://$($env:nlb_dns_name)
    certificate-authority-data: $($env:cluster_ca)
  name: eks-cluster
contexts:
- context:
    cluster: eks-cluster
    user: eks-user
  name: eks-context
current-context: eks-context
kind: Config
preferences: {}
users:
- name: eks-user
  user:
    token: $($env:eks_token)
"@

      # Write the kubeconfig content to the file
      $kubeconfigContent | Out-File -FilePath $kubeconfigPath -Encoding ascii

      Write-Host "kubeconfig created at $kubeconfigPath"

      # Verify kubeconfig
      kubectl config view

      # Test kubectl connectivity
      kubectl get nodes
  env:
    eks_token: $(eks_token)
    cluster_ca: $(cluster_ca)
    nlb_dns_name: $(nlb_dns_name)


