AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster with Private Endpoint, IP Whitelisting, Internal ALB in another VPC with VPC Peering, and Alias Record in Route53'

Parameters:
  ClusterName:
    Type: String
    Description: 'EKS Cluster name (must be lowercase)'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Cluster name must contain only lowercase alphanumeric characters and hyphens.'
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'
    AllowedPattern: '^(10|172|192)\.([0-9]{1,3}\.){2}[0-9]{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    ConstraintDescription: 'CIDR block must be a valid private IP address range with a valid subnet mask.'
  SpokeVpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'Spoke VPC Id for NLB'
  SpokeRouteTableId:
    Type: String
    Description: 'Route Table ID of the Spoke VPC'
  SubnetIds:
    Type: CommaDelimitedList
    Description: 'Comma separated list of subnet IDs in Spoke VPC for NLB'
  SpokeDomain:
    Type: String
    Description: 'The domain name for the private hosted zone'

Mappings:
  AWSHostedZoneIds:
    ap-southeast-2:
      HostedZoneId: Z1GM3OXH4ZPM65

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-1"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-2"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-3"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: shared
        - Key: kubernetes.io/role/internal-elb
          Value: 1          

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt1"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt2"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt3"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2

  RouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable3

  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      PermissionsBoundary: !ImportValue SCE:SERVICE-BOUNDARY-V3
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Cluster Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow inbound HTTPS traffic from VpcCidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
        # Allow inbound HTTPS traffic from Spoke VPC CIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !ImportValue spokeCIDR
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-cluster-sg"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  EKSClusterSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EKSClusterSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref EKSClusterSecurityGroup

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
          - !Ref Subnet3
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
        PublicAccessCidrs: []
      RoleArn: !GetAtt EKSRole.Arn
      EncryptionConfig:
        - Resources: ['secrets']
          Provider:
            KeyArn: !ImportValue SCE:KEY-ARN
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  AccessLogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${ClusterName}-${AWS::AccountId}-logs"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLifecycle
            ExpirationInDays: 2600
            Status: Enabled
            NoncurrentVersionExpirationInDays: 2600
          - Id: GlacierLifecycle
            Status: Enabled
            Transitions:
            - StorageClass: GLACIER
              TransitionInDays: 90
            NoncurrentVersionTransitions:
            - StorageClass: GLACIER
              TransitionInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: 'Enabled'
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  AccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !Sub "arn:aws:s3:::${AccessLogBucket}"
              - !Sub "arn:aws:s3:::${AccessLogBucket}/*"
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          -
            Sid: AllowALB
            Effect: Allow
            Principal:
              # Sydney ELB account
              AWS: !Sub arn:aws:iam::783225319266:root
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${AccessLogBucket}/AWSLogs/${AWS::AccountId}/*"
          -
            Sid: DeliveryAclCheckNLB
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${AccessLogBucket}
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          -
            Sid: AWSLogDeliveryWriteNLB
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AccessLogBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ClusterName}-nlb"
      Scheme: internal
      Type: network
      Subnets: !Ref SubnetIds
      LoadBalancerAttributes:
        -
          Key: access_logs.s3.enabled
          Value: true
        -
          Key: access_logs.s3.bucket
          Value: !Ref AccessLogBucket
        -
          Key: load_balancing.cross_zone.enabled
          Value: true

      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Resource
          Value: CET

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ClusterName}-nlb-tg"
      Port: 443
      Protocol: TCP
      VpcId: !Ref SpokeVpcId
      TargetType: ip
      HealthCheckProtocol: TCP
      HealthCheckPort: 443
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Resource
          Value: CET

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 443
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      # Tags:
      #   - Key: StackId
      #     Value: !Ref AWS::StackId
      #   - Key: StackName
      #     Value: !Ref AWS::StackName
      #   - Key: SCE:owner
      #     Value: CET

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref SpokeVpcId
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc-peering"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  VPCPeeringRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable3
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRouteSpoke:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SpokeRouteTableId
      DestinationCidrBlock: !Ref VpcCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  Route53RecordTXT:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue SCE-PRIVATE-HOST-ID
      Name: !Sub "hello-${ClusterName}.${SpokeDomain}"
      Type: TXT
      Comment: "Hello EKS"
      ResourceRecords:
        - !Join
            - ''
            - - '"'
              - Hello from EKS
              - '"'
      TTL: 60

  Route53RecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue SCE-PRIVATE-HOST-ID
      Name: !Sub "${ClusterName}-k8s-api.${SpokeDomain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt NLB.DNSName
        HostedZoneId: !GetAtt NLB.CanonicalHostedZoneID
      Comment: "k8s API"

  # Add CoreDNS Add-on
  CoreDNSAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: coredns
      AddonVersion: v1.11.1-eksbuild.8
      ResolveConflicts: OVERWRITE

  # Add kube-proxy Add-on
  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: kube-proxy
      AddonVersion: v1.30.0-eksbuild.3
      ResolveConflicts: OVERWRITE

  # Add VPC CNI Add-on
  VPCAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: vpc-cni
      AddonVersion: v1.18.1-eksbuild.3
      ResolveConflicts: OVERWRITE
###################################
## Nodes
###################################
  # Node IAM Role
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # Enables SSM access
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-node-role"

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref NodeInstanceRole
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 4
      AmiType: AL2_x86_64  # Amazon Linux 2
      InstanceTypes:
        - t3.medium
      DiskSize: 20  # In GB
      Labels:
        environment: production
      # Tags:
      #   - Key: Name
      #     Value: !Sub "${ClusterName}-worker-node"
      #   - Key: StackId
      #     Value: !Ref AWS::StackId
      #   - Key: StackName
      #     Value: !Ref AWS::StackName
      #   - Key: SCE:owner
      #     Value: CET


  # Instance Profile for Worker Nodes
  # NodeInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Roles:
  #       - !Ref NodeInstanceRole

  # NodeGroupLaunchTemplate:
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties:
  #     LaunchTemplateData:
  #       ImageId: !Sub "{{resolve:ssm:/aws/service/eks/optimized-ami/1.30/amazon-linux-2/recommended/image_id}}"
  #       InstanceType: t3.medium
  #       IamInstanceProfile:
  #         Arn: !GetAtt NodeInstanceProfile.Arn
  #       # KeyName: sce-cmk
  #       MetadataOptions: 
  #         HttpTokens: required     # Enforces IMDSv2
  #         HttpPutResponseHopLimit: 1
  #       BlockDeviceMappings:
  #         - DeviceName: "/dev/xvda"
  #           Ebs:
  #             Encrypted: true
  #             # KmsKeyId: !Ref NodeKmsKey  # Attach KMS key to encrypt the EBS volume
  #             VolumeSize: 20  # Size of EBS volume in GiB
  #             VolumeType: gp3  # You can use gp3, gp2, io1, etc.
  #       # Add any other configuration for your ASG like KeyName, SecurityGroupIds, etc.
  #       UserData:
  #         Fn::Base64: !Sub |
  #           #!/bin/bash
  #           /etc/eks/bootstrap.sh ${ClusterName}

  # KMS Key for EC2 EBS Volume Encryption
  # NodeKmsKey:
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: "KMS Key for EKS Worker Node EBS Volume Encryption"
  #     KeyUsage: ENCRYPT_DECRYPT
  #     EnableKeyRotation: true
  #     PendingWindowInDays: 7
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${ClusterName}-node-kms-key"
  #       - Key: StackId
  #         Value: !Ref AWS::StackId
  #       - Key: StackName
  #         Value: !Ref AWS::StackName
  #       - Key: SCE:owner
  #         Value: CET
  #     KeyPolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         # Allow root access
  #         - Sid: AllowRootAccess
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
  #           Action: "kms:*"
  #           Resource: "*"

  #         # Allow EC2 Role to use the key for encryption/decryption
  #         - Sid: AllowEC2RoleUseOfTheKey
  #           Effect: Allow
  #           Principal:
  #             AWS: !GetAtt EKSRole.Arn
  #           Action:
  #             - "kms:Encrypt"
  #             - "kms:Decrypt"
  #             - "kms:ReEncrypt*"
  #             - "kms:GenerateDataKey*"
  #             - "kms:DescribeKey"
  #           Resource: "*"
  #         -
  #           Effect: Deny
  #           Principal: "*"
  #           Action: "kms:CreateGrant"
  #           Resource: "*"
  #           Condition:
  #             BoolIfExists:
  #               kms:GrantIsForAWSResource: false
  #               aws:PrincipalIsAWSService: false
          # Deny CreateGrant unless for AWS service
          # - Sid: DenyCreateGrantUnlessAWSService
          #   Effect: Deny
          #   Principal: "*"
          #   Action: "kms:CreateGrant"
          #   Resource: "*"
          #   Condition:
          #     StringNotEqualsIfExists:
          #       kms:GrantIsForAWSResource: "true"

          # # Allow AWS services to create grants for KMS
          # - Sid: AllowCreateGrantForAWSService
          #   Effect: Allow
          #   Principal: "*"
          #   Action: "kms:CreateGrant"
          #   Resource: "*"
          #   Condition:
          #     StringEqualsIfExists:
          #       aws:PrincipalIsAWSService: "true"

  # NodeKmsKeyAlias:
  #   Type: AWS::KMS::Alias
  #   Properties:
  #     AliasName: !Sub "alias/${ClusterName}-node-kms-key"
  #     TargetKeyId: !Ref NodeKmsKey

  # Auto Scaling Group for Worker Nodes
  # NodeGroupASG:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     VPCZoneIdentifier:  # Specify the subnets created in your template
  #       - !Ref Subnet1
  #       - !Ref Subnet2
  #       - !Ref Subnet3
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref NodeGroupLaunchTemplate
  #       Version: !GetAtt NodeGroupLaunchTemplate.LatestVersionNumber
  #     MinSize: 0
  #     MaxSize: 4
  #     DesiredCapacity: 0
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${ClusterName}-worker-node"
  #         PropagateAtLaunch: true
  #       - Key: StackId
  #         Value: !Ref AWS::StackId
  #         PropagateAtLaunch: true
  #       - Key: StackName
  #         Value: !Ref AWS::StackName
  #         PropagateAtLaunch: true

Outputs:
  ClusterName:
    Description: 'EKS Cluster name'
    Value: !Ref ClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  ClusterEndpoint:
    Description: 'EKS Cluster endpoint'
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-ClusterEndpoint"

  ClusterRoleArn:
    Description: 'EKS Cluster Role ARN'
    Value: !GetAtt EKSRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterRoleArn"

  OIDCProviderArn:
    Description: 'OIDC Provider ARN'
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
    Export:
      Name: !Sub "${AWS::StackName}-OIDCProviderArn"

  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"

  SecurityGroupId:
    Description: 'EKS Cluster Security Group'
    Value: !Ref EKSClusterSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  NodeInstanceRoleArn:
    Description: 'ARN of the node instance role'
    Value: !GetAtt NodeInstanceRole.Arn

  NLBDNSName:
    Description: NLB DNS Name
    Value: !GetAtt NLB.DNSName

  NLBAlias:
    Description: NLB Alias in Route53 private zone.
    Value: !Sub "${ClusterName}-k8s-api.${SpokeDomain}"
