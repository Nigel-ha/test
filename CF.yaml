AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster with Private Endpoint, IP Whitelisting, Internal ALB in another VPC with VPC Peering, and Alias Record in Route53'

Parameters:
  ClusterName:
    Type: String
    Description: 'EKS Cluster name (must be lowercase)'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Cluster name must contain only lowercase alphanumeric characters and hyphens.'
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'
    AllowedPattern: '^(10|172|192)\.([0-9]{1,3}\.){2}[0-9]{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    ConstraintDescription: 'CIDR block must be a valid private IP address range with a valid subnet mask.'
  SpokeVpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'Spoke VPC Id for ALB'
  SpokeRouteTableId:
    Type: String
    Description: 'Route Table ID of the Spoke VPC'
  SubnetIds:
    Type: CommaDelimitedList
    Description: 'Comma separated list of subnet IDs in Spoke VPC for ALB'
  AllowedIP1:
    Type: String
    Description: 'First allowed IP address for EKS cluster access'
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}$'
    ConstraintDescription: 'Allowed IP address must be a valid IPv4 address.'
    Default: 20.37.10.126
  AllowedIP2:
    Type: String
    Description: 'Second allowed IP address for EKS cluster access'
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}$'
    ConstraintDescription: 'Allowed IP address must be a valid IPv4 address.'
    Default: 20.70.10.59
  AllowedIP3:
    Type: String
    Description: 'Third allowed IP address for EKS cluster access'
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}$'
    ConstraintDescription: 'Allowed IP address must be a valid IPv4 address.'
    Default: 20.211.138.152
  SSLCertificateArn:
    Type: String
    Description: 'ARN of the SSL certificate for ALB'
  SpokeDomain:
    Type: String
    Description: 'The domain name for the private hosted zone'

Mappings:
  AWSHostedZoneIds:
    ap-southeast-2:
      HostedZoneId: Z1GM3OXH4ZPM65

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-1"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-2"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 3, 8]]
      AvailabilityZone: ap-southeast-2c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-subnet-3"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt1"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt2"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-rt3"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2

  RouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable3

  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      PermissionsBoundary: !ImportValue SCE:SERVICE-BOUNDARY-V3
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
          - !Ref Subnet3
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
        PublicAccessCidrs: []
      RoleArn: !GetAtt EKSRole.Arn
      EncryptionConfig:
        - Resources: ['secrets']
          Provider:
            KeyArn: !ImportValue SCE:KEY-ARN
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to ALB
      VpcId: !Ref SpokeVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${AllowedIP1}/32"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${AllowedIP2}/32"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub "${AllowedIP3}/32"
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ClusterName}-alb-logs"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: 'Enabled'
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Action: s3:*
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}"
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal: '*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          -
            Sid: AllowALB
            Effect: Allow
            Principal:
              # Sydney ELB account
              AWS: !Sub arn:aws:iam::783225319266:root
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*"
          -
            Sid: DeliveryAclCheckNLB
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${S3Bucket}
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          -
            Sid: AWSLogDeliveryWriteNLB
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${S3Bucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ClusterName}-alb"
      Scheme: internal
      Type: application
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref S3Bucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true

      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Resource
          Value: CET

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ClusterName}-tg"
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref SpokeVpcId
      TargetType: ip
      HealthCheckProtocol: HTTPS
      HealthCheckPort: 443
      HealthCheckPath: "/healthz"
      Matcher:
        HttpCode: "200-299"
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Resource
          Value: CET

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Tags:
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref SpokeVpcId
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-vpc-peering"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: SCE:owner
          Value: CET

  VPCPeeringRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable3
      DestinationCidrBlock: !ImportValue spokeCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeeringRouteSpoke:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SpokeRouteTableId
      DestinationCidrBlock: !Ref VpcCidr
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  Route53RecordTXT:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue SCE-PRIVATE-HOST-ID
      Name: !Sub "hello-${ClusterName}.${SpokeDomain}"
      Type: TXT
      Comment: "Hello EKS"
      ResourceRecords:
        - !Join
            - ''
            - - '"'
              - Hello from EKS
              - '"'
      TTL: 60

  Route53RecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue SCE-PRIVATE-HOST-ID
      Name: !Sub "${ClusterName}-k8s-api.${SpokeDomain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !FindInMap [AWSHostedZoneIds, ap-southeast-2, HostedZoneId]
      Comment: "k8s API"

Outputs:
  ClusterName:
    Description: 'EKS Cluster name'
    Value: !Ref ClusterName
  ClusterRoleArn:
    Description: 'EKS Cluster Role ARN'
    Value: !GetAtt EKSRole.Arn
  ClusterEndpoint:
    Description: 'EKS Cluster endpoint'
    Value: !GetAtt EKSCluster.Endpoint
  ALBDNSName:
    Description: 'ALB DNS Name'
    Value: !GetAtt ALB.DNSName
