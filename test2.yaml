- job: onPrem
  displayName: Deploy
  dependsOn: cloud
  pool:
    name: Prod-ReleasePool-Lower
  steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download kubeconfig Artifact'
      inputs:
        buildType: 'current'
        artifactName: 'kubeconfig-artifact'  # Must match the artifact name in the cloud job
        targetPath: '$(Pipeline.Workspace)'  # Downloads to $(Pipeline.Workspace)

    - task: PowerShell@2
      displayName: 'Configure kubeconfig'
      inputs:
        targetType: 'inline'
        script: |
          # Define the kubeconfig source and target paths
          $kubeconfigSource = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "kubeconfig"
          $kubeconfigTarget = "$env:USERPROFILE\.kube\config"

          Write-Host "kubeconfigSource: $kubeconfigSource"
          Write-Host "kubeconfigTarget: $kubeconfigTarget"

          # Ensure the source file exists
          if (-Not (Test-Path $kubeconfigSource)) {
              Write-Error "kubeconfig file not found at $kubeconfigSource"
              exit 1
          }

          # Ensure the .kube directory exists
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\.kube" | Out-Null

          # Copy the kubeconfig file to the .kube directory
          Copy-Item -Path $kubeconfigSource -Destination $kubeconfigTarget -Force

          Write-Host "kubeconfig copied to $kubeconfigTarget"

          # Set NO_PROXY environment variable
          $eks_domain = (kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}' | ForEach-Object { $_ -replace 'https://', '' })
          if ($env:NO_PROXY) {
              $env:NO_PROXY = $env:NO_PROXY + ",$eks_domain"
          } else {
              $env:NO_PROXY = $eks_domain
          }
          Write-Host "NO_PROXY is set to $env:NO_PROXY"

          # Resolve the EKS domain to the NLB IP address
          try {
              $NLB_IP = [System.Net.Dns]::GetHostAddresses($eks_domain) | Select-Object -First 1 | ForEach-Object { $_.IPAddressToString }
          } catch {
              Write-Error "Failed to resolve EKS domain to IP address."
              exit 1
          }

          if (-Not $NLB_IP) {
              Write-Error "Failed to get IP address for EKS domain."
              exit 1
          }

          Write-Host "EKS Domain: $eks_domain"
          Write-Host "NLB IP Address: $NLB_IP"

          # Update the Windows Hosts File
          $HostsFile = "C:\Windows\System32\drivers\etc\hosts"
          $HostsEntry = "$NLB_IP`t$eks_domain"

          # Check if entry already exists
          if ((Get-Content -Path $HostsFile -ErrorAction Stop) -contains $HostsEntry) {
              Write-Host "Hosts file already contains the required entry."
          } else {
              # Add the entry to the hosts file
              Add-Content -Path $HostsFile -Value $HostsEntry -ErrorAction Stop
              Write-Host "Hosts file updated successfully."
          }

          # Verify kubeconfig
          kubectl config view

          # Test kubectl connectivity
          kubectl get nodes
