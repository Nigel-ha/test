Resources:
  # EKS Cluster without OIDC provider
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
          - !Ref Subnet3
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
      RoleArn: !GetAtt EKSRole.Arn

  # Lambda Role to fetch OIDC Provider
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - eks:DescribeCluster
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:CreateOpenIDConnectProvider
                Resource: '*'

  # Lambda function to fetch OIDC issuer and create provider
  OIDCProviderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              cluster_name = event['cluster_name']
              eks_client = boto3.client('eks')
              iam_client = boto3.client('iam')

              # Describe the EKS Cluster to get the OIDC Issuer URL
              cluster_info = eks_client.describe_cluster(name=cluster_name)
              oidc_url = cluster_info['cluster']['identity']['oidc']['issuer']
              
              # Create OIDC provider
              response = iam_client.create_open_id_connect_provider(
                  Url=oidc_url,
                  ClientIDList=[
                      'sts.amazonaws.com'
                  ],
                  ThumbprintList=[
                      '9e99a48a9960b14926bb7f3b02e22da0cedef055'  # Thumbprint
                  ]
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('OIDC provider created')
              }

  # Invoke the Lambda to create OIDC provider
  InvokeOIDCProviderLambda:
    Type: Custom::InvokeLambda
    Properties:
      ServiceToken: !GetAtt OIDCProviderLambda.Arn
      cluster_name: !Ref ClusterName
