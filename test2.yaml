  NodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Sub "{{resolve:ssm:/aws/service/eks/optimized-ami/1.24/amazon-linux-2/recommended/image_id}}"  # Automatically get the latest AMI
        InstanceType: t3.medium
        KeyName: !Ref KeyName  # Define your KeyPair if needed for SSH access
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        MetadataOptions:
          HttpTokens: required  # Enforce IMDSv2
          HttpPutResponseHopLimit: 2
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            /etc/eks/bootstrap.sh ${ClusterName}

  NodeGroupASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier:  # Specify the subnets created in your template
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-worker-node"
          PropagateAtLaunch: true
        - Key: StackId
          Value: !Ref AWS::StackId
          PropagateAtLaunch: true
        - Key: StackName
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref NLBTargetGroup  # Attach the worker nodes to the target group if needed for load balancing

  # Outputs for NodeGroup Information
  NodeGroupASGName:
    Description: 'EKS Node Group Auto Scaling Group Name'
    Value: !Ref NodeGroupASG
    Export:
      Name: !Sub "${AWS::StackName}-NodeGroupASGName"

  NodeLaunchTemplateId:
    Description: 'Node Launch Template ID'
    Value: !Ref NodeLaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-NodeLaunchTemplateId"
