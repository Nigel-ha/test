AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # Create a VPC
  SESVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create Subnet A
  SESSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SESVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-a"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create Subnet B
  SESSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SESVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-b"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create Subnet C
  SESSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SESVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet-c"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create a Security Group for the Endpoint Service
  EndpointServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SMTP traffic to the endpoint service
      VpcId: !Ref SESVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 25
          ToPort: 25
          CidrIp: 10.0.0.0/16  # Restrict to VPC CIDR
        - IpProtocol: tcp
          FromPort: 465
          ToPort: 465
          CidrIp: 10.0.0.0/16  # Restrict to VPC CIDR
        - IpProtocol: tcp
          FromPort: 587
          ToPort: 587
          CidrIp: 10.0.0.0/16  # Restrict to VPC CIDR
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-endpoint-service-sg"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create a Network Load Balancer (NLB) for the Endpoint Service
  EndpointServiceNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        - !Ref SESSubnetA
        - !Ref SESSubnetB
        - !Ref SESSubnetC
      LoadBalancerAttributes:
        - Key: load_balancer_cross_zone_enabled
          Value: "true"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nlb"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Create a Target Group for the NLB
  EndpointServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref SESVPC
      Port: 25  # Listen on SMTP port 25
      Protocol: TCP
      TargetType: ip
      HealthCheckProtocol: TCP
      HealthCheckPort: traffic-port
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-tg"
        - Key: StackId
          Value: !Ref AWS::StackId
        - Key: StackName
          Value: !Ref AWS::StackName

  # Attach the Target Group to the NLB for each SMTP port
  EndpointServiceListener25:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EndpointServiceNLB
      Protocol: TCP
      Port: 25
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup

  EndpointServiceListener465:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EndpointServiceNLB
      Protocol: TCP
      Port: 465
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup

  EndpointServiceListener587:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EndpointServiceNLB
      Protocol: TCP
      Port: 587
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EndpointServiceTargetGroup

Outputs:
  VPCId:
    Description: "The ID of the VPC created for SES SMTP."
    Value: !Ref SESVPC
    Export:
      Name: !Sub "SCE-${AWS::StackName}-VPCId"

  SubnetAId:
    Description: "The ID of Subnet A."
    Value: !Ref SESSubnetA
    Export:
      Name: !Sub "SCE-${AWS::StackName}-SubnetAId"

  SubnetBId:
    Description: "The ID of Subnet B."
    Value: !Ref SESSubnetB
    Export:
      Name: !Sub "SCE-${AWS::StackName}-SubnetBId"

  SubnetCId:
    Description: "The ID of Subnet C."
    Value: !Ref SESSubnetC
    Export:
      Name: !Sub "SCE-${AWS::StackName}-SubnetCId"

  SecurityGroupId:
    Description: "The ID of the Security Group for the Endpoint Service."
    Value: !Ref EndpointServiceSG
    Export:
      Name: !Sub "SCE-${AWS::StackName}-SecurityGroupId"

  VPCServiceNLBArn:
    Description: "The ARN of the Network Load Balancer used by the VPC Endpoint Service."
    Value: !Ref EndpointServiceNLB
    Export:
      Name: !Sub "SCE-${AWS::StackName}-VPCServiceNLBArn"
